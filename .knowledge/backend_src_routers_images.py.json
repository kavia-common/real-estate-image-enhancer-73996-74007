{"is_source_file": true, "format": "Python", "description": "This file defines FastAPI route handlers for managing image uploads, retrieval, and listing within a backend service. It includes endpoints for batch uploading images, listing images for the current user, and fetching individual image metadata, utilizing a storage service and database interactions.", "external_files": ["src.core.config", "src.core.db", "src.core.security", "src.models.models", "src.schemas.schemas", "src.services.storage", "src.services.usage"], "external_methods": ["get_settings", "get_db", "get_current_user", "StorageService.save", "UsageService.add_usage", "select", "db.execute", "db.flush", "db.commit", "db.refresh"], "published": ["router"], "classes": [{"name": "APIRouter", "description": "FastAPI's router class used to define API route handlers."}, {"name": "Image", "description": "Database model representing an image record."}, {"name": "User", "description": "Database model representing a user."}, {"name": "ImageOut", "description": "Schema for returning image data."}, {"name": "StorageService", "description": "Service for handling file storage operations."}, {"name": "UsageService", "description": "Service for tracking user usage metrics."}], "methods": [{"name": "upload_images( files: List[UploadFile] = File(..., description=\"Image files\"), db: AsyncSession = Depends(get_db), user: User = Depends(get_current_user), )", "description": "Handles uploading multiple images, saving their metadata, and updating usage stats.", "scope": "", "scopeKind": ""}, {"name": "list_images(db: AsyncSession = Depends(get_db), user: User = Depends(get_current_user))", "description": "Returns a list of images for the current user.", "scope": "", "scopeKind": ""}, {"name": "get_image(image_id: int, db: AsyncSession = Depends(get_db), user: User = Depends(get_current_user))", "description": "Retrieves metadata for a specific image, verifying ownership.", "scope": "", "scopeKind": ""}], "calls": ["get_settings()", "get_db()", "get_current_user()", "storage.save()", "usage.add_usage()", "db.execute()", "db.flush()", "db.commit()", "db.refresh()"], "search-terms": ["Image upload API", "Batch image upload", "Image metadata retrieval", "User-owned images", "FastAPI image router", "Storage service"], "state": 2, "file_id": 14, "knowledge_revision": 46, "git_revision": "", "revision_history": [{"30": ""}, {"46": ""}], "ctags": [{"_type": "tag", "name": "get_image", "path": "/home/kavia/workspace/code-generation/real-estate-image-enhancer-73996-74007/backend/src/routers/images.py", "pattern": "/^async def get_image(image_id: int, db: AsyncSession = Depends(get_db), user: User = Depends(get_/", "language": "Python", "kind": "function", "signature": "(image_id: int, db: AsyncSession = Depends(get_db), user: User = Depends(get_current_user))"}, {"_type": "tag", "name": "list_images", "path": "/home/kavia/workspace/code-generation/real-estate-image-enhancer-73996-74007/backend/src/routers/images.py", "pattern": "/^async def list_images(db: AsyncSession = Depends(get_db), user: User = Depends(get_current_user)/", "language": "Python", "kind": "function", "signature": "(db: AsyncSession = Depends(get_db), user: User = Depends(get_current_user))"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/real-estate-image-enhancer-73996-74007/backend/src/routers/images.py", "pattern": "/^router = APIRouter()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "settings", "path": "/home/kavia/workspace/code-generation/real-estate-image-enhancer-73996-74007/backend/src/routers/images.py", "pattern": "/^settings = get_settings()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "upload_images", "path": "/home/kavia/workspace/code-generation/real-estate-image-enhancer-73996-74007/backend/src/routers/images.py", "pattern": "/^async def upload_images($/", "language": "Python", "kind": "function", "signature": "( files: List[UploadFile] = File(..., description=\"Image files\"), db: AsyncSession = Depends(get_db), user: User = Depends(get_current_user), )"}], "hash": "e07fae0294a99b293c3020b504849929", "format-version": 4, "code-base-name": "backend", "filename": "backend/src/routers/images.py", "fields": [{"name": "router = APIRouter()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "settings = get_settings()", "scope": "", "scopeKind": "", "description": "unavailable"}]}